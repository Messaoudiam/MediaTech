{
  "name": "mediatech-fullstack",
  "version": "1.0.0",
  "description": "MediaTech - Système de Gestion de Médiathèque",
  "scripts": {
    "dev": "docker-compose up -d",
    "dev:build": "docker-compose up -d --build",
    "dev:stop": "docker-compose down",
    "dev:clean": "docker-compose down -v --remove-orphans",
    "dev:logs": "docker-compose logs -f",
    "dev:tools": "docker-compose --profile tools up -d",
    "prod": "docker-compose -f docker-compose.prod.yml up -d",
    "prod:build": "docker-compose -f docker-compose.prod.yml up -d --build",
    "prod:stop": "docker-compose -f docker-compose.prod.yml down",
    "prod:logs": "docker-compose -f docker-compose.prod.yml logs -f",
    "prisma:migrate": "docker-compose exec backend npx prisma migrate deploy",
    "prisma:migrate:dev": "docker-compose exec backend npx prisma migrate dev",
    "prisma:studio": "docker-compose exec backend npx prisma studio",
    "db:backup": "docker-compose exec db pg_dump -U postgres myapp > backups/manual-backup-$(date +%Y%m%d-%H%M%S).sql",
    "db:restore": "docker-compose exec -T db psql -U postgres myapp",
    "deploy": "./scripts/deploy.sh production deploy",
    "deploy:dev": "./scripts/deploy.sh development deploy",
    "update": "./scripts/update.sh production main",
    "health": "./scripts/deploy.sh production health",
    "test:ci": "npm run test:backend && npm run test:frontend",
    "test:backend": "cd backend && npm test",
    "test:frontend": "cd frontend && npm test",
    "audit:fix": "npm run audit:fix:backend && npm run audit:fix:frontend",
    "audit:fix:backend": "cd backend && npm audit fix",
    "audit:fix:frontend": "cd frontend && npm audit fix",
    "update:deps": "npm run update:deps:backend && npm run update:deps:frontend",
    "update:deps:backend": "cd backend && npm update",
    "update:deps:frontend": "cd frontend && npm update"
  }
}
