version: "3.8"

services:
  backend:
    build:
      context: ./backend
      dockerfile: ../.docker/backend/Dockerfile
      target: production
    container_name: mediatech-backend-dev
    ports:
      - "4000:3000"
    env_file:
      - ./backend/.env.development
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:password@db:5432/myapp
      - API_URL=http://localhost:4000
      - FRONTEND_URL=http://localhost:4001
      - RESEND_FROM_EMAIL=noreply@my-library.cloud
    depends_on:
      db:
        condition: service_healthy
    networks:
      - mediatech-dev
    restart: unless-stopped
    volumes:
      - backend_uploads:/usr/src/app/uploads
      - backend_logs:/usr/src/app/logs
    # healthcheck:
    #   test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: ../.docker/frontend/Dockerfile
      target: production
    container_name: mediatech-frontend-dev
    ports:
      - "4001:80"
    environment:
      - API_URL=http://localhost:4000
    depends_on:
      - backend
    networks:
      - mediatech-dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  db:
    image: postgres:15-alpine
    container_name: mediatech-db-dev
    ports:
      - "4002:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=myapp
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - mediatech-dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d myapp"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c log_statement=all
      -c log_destination=stderr
      -c max_connections=100
      -c shared_buffers=128MB
      -c effective_cache_size=512MB

  # Development tools
  adminer:
    image: adminer:4-standalone
    container_name: mediatech-adminer-dev
    ports:
      - "4003:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=db
      - ADMINER_DESIGN=pepa-linha
    depends_on:
      db:
        condition: service_healthy
    networks:
      - mediatech-dev
    restart: unless-stopped
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local

networks:
  mediatech-dev:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
