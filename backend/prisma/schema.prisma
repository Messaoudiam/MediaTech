generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Constantes de l'application
// MAX_ACTIVE_BORROWINGS: Nombre maximum d'emprunts simultanés par utilisateur
// Remarque: Ces constantes ne sont pas stockées en base mais servent de référence pour les validations
// dans le code applicatif

enum UserRole {
  USER
  ADMIN
}

model User {
  id                       String     @id @default(uuid())
  email                    String     @unique
  password                 String
  role                     UserRole   @default(USER)
  lastLogin                DateTime?
  failedAttempts           Int        @default(0)
  isLocked                 Boolean    @default(false)
  isEmailVerified          Boolean    @default(false)
  emailVerificationToken   String?
  emailVerificationExpires DateTime?
  activeBorrowingsCount    Int        @default(0)

  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt

  sessions    Session[]
  borrowings  Borrowing[]
  favorites   Favorite[]

  @@index([email])
  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@map("sessions")
}

enum ResourceType {
  BOOK
  COMIC
  DVD
  GAME
  MAGAZINE
  AUDIOBOOK
}

model Resource {
  id          String       @id @default(uuid())
  title       String
  type        ResourceType
  author      String?
  isbn        String?      @unique
  publisher   String?
  publishedAt DateTime?
  description String
  genre       String?
  language    String?
  
  copies      Copy[]

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([type])
}

model Book {
  id            String   @id @default(uuid())
  title         String
  author        String
  isbn          String?  @unique
  coverImageUrl String?
  description   String?
  publishedYear Int?
  genre         String?
  pageCount     Int?
  publisher     String?
  language      String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  favorites     Favorite[]

  @@index([author])
  @@index([genre])
  @@map("books")
}

model Favorite {
  id       String   @id @default(uuid())
  userId   String
  bookId   String
  createdAt DateTime @default(now())
  
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  book     Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  
  @@unique([userId, bookId])
  @@map("favorites")
}

model Copy {
  id        String   @id @default(uuid())
  resourceId String
  available Boolean  @default(true)
  condition String?

  resource  Resource @relation(fields: [resourceId], references: [id])
  borrowings Borrowing[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([resourceId])
}

model Borrowing {
  id         String        @id @default(uuid())
  userId     String
  copyId     String
  borrowedAt DateTime      @default(now())
  dueDate    DateTime
  returnedAt DateTime?
  status     BorrowingStatus @default(ACTIVE)

  user       User          @relation(fields: [userId], references: [id])
  copy       Copy          @relation(fields: [copyId], references: [id])

  @@index([userId])
  @@index([copyId])
  @@index([status])
}

enum BorrowingStatus {
  ACTIVE
  RETURNED
  OVERDUE
}
