generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Constantes de l'application
// MAX_ACTIVE_BORROWINGS: Nombre maximum d'emprunts simultanés par utilisateur
// Remarque: Ces constantes ne sont pas stockées en base mais servent de référence pour les validations
// dans le code applicatif

enum UserRole {
  USER
  ADMIN
}

model User {
  id                       String     @id @default(uuid())
  email                    String     @unique
  password                 String
  role                     UserRole   @default(USER)
  lastLogin                DateTime?
  failedAttempts           Int        @default(0)
  isLocked                 Boolean    @default(false)
  isEmailVerified          Boolean    @default(false)
  emailVerificationToken   String?
  emailVerificationExpires DateTime?
  activeBorrowingsCount    Int        @default(0)

  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt

  sessions    Session[]
  borrowings  Borrowing[]
  favorites   Favorite[]
  contactRequests ContactRequest[]

  @@index([email])
  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@map("sessions")
}

enum ResourceType {
  BOOK
  COMIC
  DVD
  GAME
  MAGAZINE
  AUDIOBOOK
}

model Resource {
  id            String       @id @default(uuid())
  title         String
  type          ResourceType
  author        String?
  isbn          String?      @unique
  publisher     String?
  publishedAt   DateTime?
  description   String
  genre         String?
  language      String?
  coverImageUrl String?
  pageCount     Int?
  publishedYear Int?
  developer     String?      // Pour les jeux
  platform      String?      // Pour les jeux
  pegiRating    Int?         // Pour les jeux
     
  director      String?      // Pour les DVD
  actors        String?      // Pour les DVD
  duration      Int?         // Pour les DVD
     
  issueNumber   String?      // Pour les magazines
  frequency     String?      // Pour les magazines
  
  copies      Copy[]
  favorites   Favorite[]

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([type])
  @@index([author])
  @@index([genre])
}

model Favorite {
  id         String   @id @default(uuid())
  userId     String
  resourceId String
  createdAt  DateTime @default(now())
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  
  @@unique([userId, resourceId])
  @@map("favorites")
}

model Copy {
  id        String   @id @default(uuid())
  resourceId String
  available Boolean  @default(true)
  condition String?

  resource  Resource @relation(fields: [resourceId], references: [id])
  borrowings Borrowing[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([resourceId])
}

model Borrowing {
  id         String        @id @default(uuid())
  userId     String
  copyId     String
  borrowedAt DateTime      @default(now())
  dueDate    DateTime
  returnedAt DateTime?
  status     BorrowingStatus @default(ACTIVE)

  user       User          @relation(fields: [userId], references: [id])
  copy       Copy          @relation(fields: [copyId], references: [id])

  @@index([userId])
  @@index([copyId])
  @@index([status])
}

enum BorrowingStatus {
  ACTIVE
  RETURNED
  OVERDUE
}

model ContactRequest {
  id          String    @id @default(uuid())
  userId      String?   // Optionnel pour permettre aux visiteurs non-connectés d'envoyer des demandes
  email       String    // Email obligatoire pour les non-connectés
  name        String    // Nom obligatoire pour les non-connectés  
  subject     String
  message     String
  status      ContactRequestStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relation optionnelle avec User
  user        User?     @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([status])
  @@map("contact_requests")
}

enum ContactRequestStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}
